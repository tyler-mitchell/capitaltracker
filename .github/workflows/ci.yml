name: ci

on:
    push:
        tags:
            - '*'
        branches: [main]
    pull_request:
        types: [opened, synchronize]

concurrency:
    group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
    cancel-in-progress: true

env:
    NEXT_TELEMETRY_DISABLED: 1
    NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT: 3
    NX_CLOUD_DISTRIBUTED_EXECUTION: true
    NX_CLOUD_DISTRIBUTED_EXECUTION_STOP_AGENTS_ON_FAILURE: true
    NX_EXEC: 'npx nx affected --nx-bail --base=$NX_BASE --head=$NX_HEAD --parallel=$NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT --target'
    RUST: false
    RUST_BUILT: false

jobs:
    web:
        name: Initialize Web
        runs-on: ubuntu-latest
        defaults:
            run:
                shell: bash
        steps:
            - name: Update
              run: sudo apt-get update

            - name: Install Protocol Buffer Dependencies
              run: sudo apt-get install -y protobuf-compiler libprotobuf-dev

            - name: Install Rust Toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  components: rustfmt, clippy

            - name: Install Node
              uses: actions/setup-node@v3
              with:
                  node-version: 'lts/*'

            - name: Checkout [Pull Request]
              uses: actions/checkout@v3
              if: github.event_name == 'pull_request'
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  fetch-depth: 0

            - name: Checkout [Main]
              uses: actions/checkout@v3
              if: github.event_name != 'pull_request'
              with:
                  fetch-depth: 0

            - name: Derive SHAs
              uses: nrwl/nx-set-shas@v3

            - name: Node Cache
              id: node_cache
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cache/Cypress/
                      node_modules/
                  key: ubuntu-latest-node-${{ hashFiles('yarn.lock') }}
                  restore-keys: ubuntu-latest-node-

            - name: Rust Cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ubuntu-latest-cargo-${{ hashFiles('Cargo.lock') }}
                  restore-keys: ubuntu-latest-cargo

            - name: Install Node Dependencies
              if: steps.node_cache.outputs.cache-hit != 'true'
              run: yarn install --immutable

            - name: Format Workspace
              if: needs.agents.result != 'failure' && needs.agents.result != 'cancelled' && needs.agents.result != 'skipped'
              run: |
                  NX_CLOUD_DISTRIBUTED_EXECUTION=false npx nx-cloud record -- npx nx format:check --libs-and-apps
                  cargo fmt --all --check

            - name: Lint Workspace
              if: needs.agents.result != 'failure' && needs.agents.result != 'cancelled' && needs.agents.result != 'skipped'
              run: NX_CLOUD_DISTRIBUTED_EXECUTION=false npx nx-cloud record -- npx nx workspace-lint

            - name: Export Web
              run: NX_CLOUD_DISTRIBUTED_EXECUTION=false npx nx export --skip-nx-cache

            - name: Upload Web
              uses: actions/upload-artifact@v3
              with:
                  name: dist
                  path: dist

    main:
        name: Main Job
        needs: [web]
        runs-on: ubuntu-latest
        defaults:
            run:
                shell: bash
        steps:
            - name: Checkout [Pull Request]
              uses: actions/checkout@v3
              if: github.event_name == 'pull_request'
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  fetch-depth: 0

            - name: Checkout [Main]
              uses: actions/checkout@v3
              if: github.event_name != 'pull_request'
              with:
                  fetch-depth: 0

            - name: Install Node
              uses: actions/setup-node@v3
              with:
                  node-version: 'lts/*'

            - name: Download Web
              uses: actions/download-artifact@v3
              with:
                  name: dist
                  path: dist

            - name: Derive SHAs
              uses: nrwl/nx-set-shas@v3

            - name: Node Cache
              id: node_cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      ~/.cache/Cypress/
                      node_modules/
                  key: ubuntu-latest-node-${{ hashFiles('yarn.lock') }}
                  restore-keys: ubuntu-latest-node-

            - name: Rust Cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ubuntu-latest-cargo-${{ hashFiles('Cargo.lock') }}
                  restore-keys: ubuntu-latest-cargo

            - name: Install Node Dependencies
              if: steps.node_cache.outputs.cache-hit != 'true'
              run: yarn install --immutable

            - name: Start Agents
              if: needs.agents.result != 'failure' && needs.agents.result != 'cancelled' && needs.agents.result != 'skipped'
              run: npx nx-cloud start-ci-run --stop-agents-after=e2e

            - name: Run Agents
              id: agents
              if: needs.agents.result != 'failure' && needs.agents.result != 'cancelled' && needs.agents.result != 'skipped'
              uses: jameshenry/parallel-bash-commands@v1
              with:
                  cmd1: $NX_EXEC build
                  cmd2: $NX_EXEC test
                  cmd3: $NX_EXEC lint
                  cmd4: npx nx affected --base=$NX_BASE --head=$NX_HEAD --parallel=1 --target=e2e

            - name: Stop Agents
              if: always()
              run: npx nx-cloud stop-all-agents

            - name: Abort Workflow
              if: failure()
              run: |
                  curl -X POST -H "Authorization: Bearer ${{ github.token }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel

            - name: Delete Artifacts
              if: failure()
              uses: geekyeggo/delete-artifact@v2
              with:
                  name: '*'

    set-agents:
        runs-on: ubuntu-latest
        needs: [web]
        name: Set Agent Matrix
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}
        steps:
            - name: Calculate Matrix
              id: set-matrix
              shell: bash
              run: |
                  AGENTS_JSON_ARRAY=$(node -e "console.log(JSON.stringify(Array.from(new Array($NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT)).map((_, i) => i + 1)));")
                  echo $AGENTS_JSON_ARRAY
                  echo "matrix=$AGENTS_JSON_ARRAY" >> $GITHUB_OUTPUT

    agents:
        name: Agent ${{ matrix.agent }}
        needs: set-agents
        runs-on: ubuntu-latest
        defaults:
            run:
                shell: bash
        strategy:
            matrix:
                agent:
                    - ${{fromJson(needs.set-agents.outputs.matrix)}}
        steps:
            - name: Update
              run: sudo apt-get update

            - name: Install Tauri Dependencies
              run: sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

            - name: Install Protocol Buffer Dependencies
              run: sudo apt-get install -y protobuf-compiler libprotobuf-dev

            - name: Install Rust Toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  components: rustfmt, clippy

            - name: Install Node
              uses: actions/setup-node@v3
              with:
                  node-version: 'lts/*'

            - name: Checkout [Pull Request]
              uses: actions/checkout@v3
              if: github.event_name == 'pull_request'
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  fetch-depth: 0

            - name: Checkout [Main]
              uses: actions/checkout@v3
              if: github.event_name != 'pull_request'
              with:
                  fetch-depth: 0

            - name: Derive SHAs
              uses: nrwl/nx-set-shas@v3

            - name: Restore Node Cache
              id: node_cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      ~/.cache/Cypress/
                      node_modules/
                  key: ubuntu-latest-node-${{ hashFiles('yarn.lock') }}
                  restore-keys: ubuntu-latest-node-

            - name: Restore Rust Cache
              id: rust_cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ubuntu-latest-cargo-${{ hashFiles('Cargo.lock') }}
                  restore-keys: ubuntu-latest-cargo

            - name: Install Node Dependencies
              if: steps.node_cache.outputs.cache-hit != 'true'
              run: yarn install --immutable

            - name: Download Web
              uses: actions/download-artifact@v3
              with:
                  name: dist
                  path: dist

            - name: Run Agent
              run: npx nx-cloud start-agent

            - name: Abort Workflow
              if: failure()
              run: |
                  curl -X POST -H "Authorization: Bearer ${{ github.token }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel

            - name: Delete Artifacts
              if: failure()
              uses: geekyeggo/delete-artifact@v2
              with:
                  name: '*'

    deploy:
        name: Deploy Web
        runs-on: ubuntu-latest
        needs: [main, agents]
        defaults:
            run:
                shell: bash
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Node Cache
              id: node_cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      ~/.cache/Cypress/
                      node_modules/
                  key: ubuntu-latest-node-${{ hashFiles('yarn.lock') }}
                  restore-keys: ubuntu-latest-node-

            - name: Install Node
              uses: actions/setup-node@v3
              with:
                  node-version: 'lts/*'

            - name: Download Web
              uses: actions/download-artifact@v3
              with:
                  name: dist
                  path: dist

            - name: Install Node Dependencies
              if: steps.node_cache.outputs.cache-hit != 'true'
              run: yarn install --immutable

            - name: Deploy to Firebase Hosting Preview on PR
              if: github.event.pull_request.head.repo.full_name == github.repository
              uses: FirebaseExtended/action-hosting-deploy@v0
              with:
                  repoToken: '${{ secrets.GITHUB_TOKEN }}'
                  firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_LIFEMASTERY_8F9C1 }}'
                  expires: 30d
                  projectId: lifemastery-8f9c1

            - name: Deploy to Firebase Hosting on Main
              if: github.ref == '/refs/heads/main' && github.event_name != 'pull_request'
              uses: FirebaseExtended/action-hosting-deploy@v0
              with:
                  repoToken: '${{ secrets.GITHUB_TOKEN }}'
                  firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_LIFEMASTERY_8F9C1 }}'
                  channelId: live
                  projectId: lifemastery-8f9c1

    release:
        name: Release Desktop
        runs-on: ${{ matrix.platform }}
        needs: [main, agents]
        defaults:
            run:
                shell: bash
        strategy:
            fail-fast: false
            matrix:
                platform: [macos-latest, ubuntu-latest, windows-latest]
        steps:
            - name: Update
              run: sudo apt-get update

            - name: Install Protocol Buffer Dependencies
              run: sudo apt-get install -y protobuf-compiler libprotobuf-dev

            - name: Install Tauri Dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-latest'
              run: sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

            - name: Install Rust Toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  components: rustfmt, clippy

            - name: Install Node
              uses: actions/setup-node@v3
              with:
                  node-version: 'lts/*'

            - name: Checkout [Pull Request]
              uses: actions/checkout@v3
              if: github.event_name == 'pull_request'
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  fetch-depth: 0

            - name: Checkout [Main]
              uses: actions/checkout@v3
              if: github.event_name != 'pull_request'
              with:
                  fetch-depth: 0

            - name: Node Cache
              id: node_cache
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cache/Cypress/
                      node_modules/
                  key: ${{ matrix.platform }}-node-${{ hashFiles('yarn.lock') }}
                  restore-keys: ${{ matrix.platform }}-node-

            - name: Rust Cache
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ${{ matrix.platform }}-node-${{ hashFiles('Cargo.lock') }}
                  restore-keys: ${{ matrix.platform }-node-

            - name: Install Node Dependencies
              if: steps.node_cache.outputs.cache-hit != 'true'
              run: yarn install --immutable

            - name: Release Tauri App
              if: startsWith(github.ref, 'refs/tags/v')
              uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tagName: v__VERSION__ # tauri-action replaces \_\_VERSION\_\_ with the app version
                  releaseName: 'v__VERSION__'
                  releaseBody: 'See the assets to download this version and install.'
                  releaseDraft: false
                  prerelease: false

    cleanup:
        name: Cleanup
        runs-on: ubuntu-latest
        needs: [deploy, release]
        steps:
            - name: Delete Artifacts
              uses: geekyeggo/delete-artifact@v2
              with:
                  name: '*'
