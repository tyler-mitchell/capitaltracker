name: ci

on:
    push:
        tags:
            - '*'
        branches: [main]
    pull_request:
        types: [opened, synchronize]

concurrency:
    group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
    cancel-in-progress: true

env:
    NEXT_TELEMETRY_DISABLED: 1
    NX_CLOUD_DISTRIBUTED_EXECUTION: true
    NX_CLOUD_DISTRIBUTED_EXECUTION_STOP_AGENTS_ON_FAILURE: true
    NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT: 3
    NX_EXEC: 'npx nx affected --base=$NX_BASE --head=$NX_HEAD --parallel=$NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT --target'
    RUST: false
    RUST_BUILT: false

jobs:
    main:
        name: Main Job
        runs-on: ${{ matrix.os }}
        defaults:
            run:
                shell: bash
        strategy:
            matrix:
                os: [ubuntu-latest]
        steps:
            - name: Update
              run: sudo apt-get update

            - name: Install Tauri Dependencies
              run: sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

            - name: Install Protocol Buffer Dependencies
              run: sudo apt-get install -y protobuf-compiler libprotobuf-dev

            - name: Install Rust Toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  components: rustfmt, clippy

            - name: Checkout [Pull Request]
              uses: actions/checkout@v3
              if: ${{ github.event_name == 'pull_request' }}
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  fetch-depth: 0

            - name: Checkout [Main]
              uses: actions/checkout@v3
              if: ${{ github.event_name != 'pull_request' }}
              with:
                  fetch-depth: 0

            - name: Derive SHAs
              uses: nrwl/nx-set-shas@v3

            - name: Yarn Cache Path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

            - name: Node Cache
              id: node_cache
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cache/Cypress/
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                      node_modules/
                  key: ubuntu-latest-node-${{ hashFiles('yarn.lock') }}
                  restore-keys: ubuntu-latest-node-

            - name: Rust Cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ubuntu-latest-cargo-${{ hashFiles('Cargo.lock') }}
                  restore-keys: ubuntu-latest-cargo

            - name: Install Node Dependencies
              if: steps.node_cache.outputs.cache-hit != 'true'
              run: yarn install --immutable

            - name: Start Agents
              run: npx nx-cloud start-ci-run

            - name: Format Workspace
              run: |
                NX_CLOUD_DISTRIBUTED_EXECUTION=false npx nx-cloud record -- npx nx format:check --libs-and-apps
                cargo fmt --all --check

            - name: Lint Workspace
              run: |
                NX_CLOUD_DISTRIBUTED_EXECUTION=false npx nx-cloud record -- npx nx workspace-lint
                NX_CLOUD_DISTRIBUTED_EXECUTION=false npx nx affected --base=$NX_BASE --head=$NX_HEAD --target=lint

            - name: Run Agents
              uses: jameshenry/parallel-bash-commands@v1
              with:
                  cmd1: $NX_EXEC build
                  cmd2: $NX_EXEC test
                  cmd3: $NX_EXEC e2e

            - name: Stop Agents
              if: ${{ always() }}
              run: npx nx-cloud stop-all-agents

    set-agents:
        runs-on: ubuntu-latest
        name: Set Agent Matrix
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}
        steps:
            - name: Calculate Matrix
              id: set-matrix
              shell: bash
              run: |
                  AGENTS_JSON_ARRAY=$(node -e "console.log(JSON.stringify(Array.from(new Array($NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT)).map((_, i) => i + 1)));")
                  echo $AGENTS_JSON_ARRAY
                  echo "matrix=$AGENTS_JSON_ARRAY" >> $GITHUB_OUTPUT

    agents:
        name: Agent ${{ matrix.agent }}
        needs: set-agents
        runs-on: ubuntu-latest
        defaults:
            run:
                shell: bash
        strategy:
            matrix:
                agent:
                    - ${{fromJson(needs.set-agents.outputs.matrix)}}
        steps:
            - name: Update
              run: sudo apt-get update

            - name: Install Tauri Dependencies
              run: sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

            - name: Install Protocol Buffer Dependencies
              run: sudo apt-get install -y protobuf-compiler libprotobuf-dev

            - name: Install Rust Toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  components: rustfmt, clippy

            - name: Checkout [Pull Request]
              uses: actions/checkout@v3
              if: ${{ github.event_name == 'pull_request' }}
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  fetch-depth: 0

            - name: Checkout [Main]
              uses: actions/checkout@v3
              if: ${{ github.event_name != 'pull_request' }}
              with:
                  fetch-depth: 0

            - name: Derive SHAs
              uses: nrwl/nx-set-shas@v3

            - name: Yarn Cache Path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

            - name: Restore Node Cache
              id: node_cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      ~/.cache/Cypress/
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                      node_modules/
                  key: ubuntu-latest-node-${{ hashFiles('yarn.lock') }}
                  restore-keys: ubuntu-latest-node-

            - name: Restore Rust Cache
              id: rust_cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ubuntu-latest-cargo-${{ hashFiles('Cargo.lock') }}
                  restore-keys: ubuntu-latest-cargo

            - name: Install Node Dependencies
              if: steps.node_cache.outputs.cache-hit != 'true'
              run: yarn install --immutable

            - name: Check Rust Affected
              run: |
                  if npx nx print-affected --select=projects | sed "s/, /\n/g" | grep -E "^api$|^rust-[^,]*|^desktop$"; then
                      echo "RUST=true" >> $GITHUB_ENV
                  fi

            - name: Run Agent
              run: npx nx-cloud start-agent

            - name: Archive Rust Build
              if: steps.rust_cache.outputs.cache-hit != 'true' && env.RUST == 'true'
              run: |
                  if [ -d "target" ]; then
                    mv target target-agent-${{ matrix.agent }}
                    tar -cf target-agent-${{ matrix.agent }}.tar target-agent-${{ matrix.agent }}/
                    echo "RUST_BUILT=true" >> $GITHUB_ENV
                  fi

            - name: Upload Build
              if: steps.rust_cache.outputs.cache-hit != 'true' && env.RUST == 'true' && env.RUST_BUILT == 'true'
              uses: actions/upload-artifact@v3
              with:
                  name: build-agent-${{ matrix.agent }}
                  path: target-agent-${{ matrix.agent }}.tar

    cache:
        name: Cache Archived Build
        runs-on: ubuntu-latest
        needs: [main, agents]
        defaults:
            run:
                shell: bash
        steps:
            - name: Checkout [Pull Request]
              uses: actions/checkout@v3
              if: ${{ github.event_name == 'pull_request' }}
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  fetch-depth: 0

            - name: Checkout [Main]
              uses: actions/checkout@v3
              if: ${{ github.event_name != 'pull_request' }}
              with:
                  fetch-depth: 0

            - name: Yarn Cache Path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

            - name: Derive SHAs
              uses: nrwl/nx-set-shas@v3

            - name: Node Cache
              id: node_cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      ~/.cache/Cypress/
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                      node_modules/
                  key: ubuntu-latest-node-${{ hashFiles('yarn.lock') }}
                  restore-keys: ubuntu-latest-node-

            - name: Rust Cache
              id: rust_cache
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ubuntu-latest-cargo-${{ hashFiles('Cargo.lock') }}
                  restore-keys: ubuntu-latest-cargo

            - name: Install Node Dependencies
              if: steps.node_cache.outputs.cache-hit != 'true'
              run: yarn install --immutable

            - name: Check Rust Affected
              run: |
                  if npx nx print-affected --select=projects | sed "s/, /\n/g" | grep -E "^api$|^rust-[^,]*|^desktop$"; then
                      echo "RUST=true" >> $GITHUB_ENV
                  fi

            - name: Download Build
              if: steps.rust_cache.outputs.cache-hit != 'true' && env.RUST == 'true'
              uses: actions/download-artifact@v3

            - name: Delete Build Artifacts
              uses: geekyeggo/delete-artifact@v2
              if: steps.rust_cache.outputs.cache-hit != 'true' && env.RUST == 'true'
              with:
                  name: build-agent-*

            - name: Merge Build
              if: steps.rust_cache.outputs.cache-hit != 'true' && env.RUST == 'true'
              run: |
                  find . -name '*.tar' -print -exec tar xf '{}' \; > result.txt
                  if [ -s "result.txt" ]; then
                    rsync -av --quiet --ignore-existing target-agent-*/ target/
                  else
                    echo "No build artifacts found"
                  fi
